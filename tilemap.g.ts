// Auto-generated code. Do not edit.
namespace myTiles {
    //% fixedInstance jres blockIdentity=images._tile
    export const transparency16 = image.ofBuffer(hex``);

    helpers._registerFactory("tilemap", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "level0":
            case "level2":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . 2 2 2 2 2 2 2 2 . . . . . 
. . . 2 2 2 2 2 2 2 2 . . . . . 
. . . 2 2 2 2 2 2 2 2 . . . . . 
. . . 2 2 2 2 2 2 2 2 . . . . . 
. . . 2 2 2 2 2 2 2 2 . . . . . 
. 2 2 2 2 2 2 2 2 2 2 2 2 . . . 
. 2 . 2 2 2 . 2 2 2 2 . 2 . . . 
. 2 . 2 2 2 . 2 2 2 2 . 2 . . . 
. . 2 . . . . . . . . 2 2 . . . 
. . . 2 . . . . . . 2 2 . . . . 
. . . 2 . . . . . . 2 . . . . . 
. . . 2 . . . . . . 2 . . . . . 
`, [myTiles.transparency16,sprites.builtin.brick,sprites.builtin.field0,sprites.castle.rock0,sprites.castle.saplingOak,sprites.castle.saplingPine,sprites.castle.shrub,sprites.dungeon.floorLight2], TileScale.Sixteen);
            case "level5":
            case "level5":return tiles.createTilemap(hex`1000100000000000000000000000000000000000000000000000000000000000000000000004030303030303030303030303070000030303030303030303030303030300000503030303030303030303030306000000050303030303030303030306000000000000000000030300000000000000000000000000000202000000000000000000000000000002020000000000000000010000000000020200000000000100000000000000000202000000000000000000000000000002020000000000000000000000000000020200000000000000000100000000000202000000000001000000000000000002020000000000000000000000000000020200000000000000`, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16,sprites.castle.saplingOak,sprites.swamp.swampTile16,sprites.swamp.swampTile9,sprites.swamp.swampTile6,sprites.swamp.swampTile12,sprites.swamp.swampTile14,sprites.swamp.swampTile8], TileScale.Sixteen);
            case "level9":
            case "level9":return tiles.createTilemap(hex``, img`
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
`, [myTiles.transparency16,sprites.castle.saplingPine,sprites.castle.saplingOak], TileScale.Sixteen);
            case "beginning":
            case "level1":return tiles.createTilemap(hex``, img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, [myTiles.transparency16,sprites.castle.tileGrass2,sprites.skillmap.islandTile4,sprites.builtin.forestTiles0,sprites.castle.tileGrass1,sprites.castle.tileGrass3,sprites.swamp.swampTile1], TileScale.Sixteen);
        }
        return null;
    })

    helpers._registerFactory("tile", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "transparency16":return transparency16;
        }
        return null;
    })

}
// Auto-generated code. Do not edit.
